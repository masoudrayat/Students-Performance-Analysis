# do not change these options
knitr::opts_chunk$set(echo = TRUE) # do not edit this line.
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load the dataset here
student_performance <- read.csv("D:/Students-Performance-Analysis/dataset/contents.csv")
# further data preparation here
# Exploring the data
summary(student_performance)
str(student_performance)
# Count missing values in the "language" and "feedback" columns
missing_values_lang <- sum(is.na(student_performance$language))
missing_values_feed <- sum(is.na(student_performance$feedback))
cat("Number of missing values in 'language' column:", missing_values_lang, "
")
cat("Number of missing values in 'feedback' column:", missing_values_feed, "
")
# Checking non-numeric columns
table(student_performance$gender)
table(student_performance$outcome)
# Check for duplicates in the studentID column
duplicate_count <- sum(duplicated(student_performance$studentID))
cat("Number of duplicates in 'studentID' column:", duplicate_count, "
")
# Replace NA values with mean of the column
student_performance$feedback[is.na(student_performance$feedback)] <- round(mean(student_performance$feedback, na.rm = TRUE), 0)
student_performance$language[is.na(student_performance$language)] <- round(mean(student_performance$language, na.rm = TRUE), 0)
# Remove out-of-range ages
student_dataset <- subset(student_performance, age < 100)
rm(student_performance)
# Final data check
student_dataset %>%
verify(has_all_names("studentID", "gender", "age", "outcome", "language", "feedback", "Year1", "Year2", "Year3", "Year4")) %>%
assert(not_na, studentID, gender, age, outcome, language, feedback, Year1, Year2, Year3, Year4) %>%
verify(age >= 10) %>%
verify(age <= 100) %>%
assert(in_set("Male", "Female"), gender) %>%
assert(in_set("E1", "E2", "Unemployed", "Education"), outcome) %>%
assert(within_bounds(10000, 99999), studentID) %>%
assert(within_bounds(0, 10), language) %>%
assert(within_bounds(0, 10), feedback) %>%
assert(within_bounds(0, 100), Year1) %>%
assert(within_bounds(0, 100), Year2) %>%
assert(within_bounds(0, 100), Year3) %>%
assert(within_bounds(0, 100), Year4)
cat("All checks passed successfully\n")
# do not change these options
knitr::opts_chunk$set(echo = TRUE) # do not edit this line.
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load any required libraries / additional files here
library(MASS)
library(gapminder)
library(scales)
library(assertr)
library(RSQLite)
library(corrplot)
library(performance)
library(tableone)
library(psych)
library(flextable)
library(readr)
library(dplyr)
library(ggplot2)
library(boot)
# load the dataset here
student_performance <- read.csv("D:/Students-Performance-Analysis/data/contents.csv")
# further data preparation here
# Exploring the data
summary(student_performance)
str(student_performance)
# Count missing values in the "language" and "feedback" columns
missing_values_lang <- sum(is.na(student_performance$language))
missing_values_feed <- sum(is.na(student_performance$feedback))
cat("Number of missing values in 'language' column:", missing_values_lang, "
")
cat("Number of missing values in 'feedback' column:", missing_values_feed, "
")
# Checking non-numeric columns
table(student_performance$gender)
table(student_performance$outcome)
# Check for duplicates in the studentID column
duplicate_count <- sum(duplicated(student_performance$studentID))
cat("Number of duplicates in 'studentID' column:", duplicate_count, "
")
# Replace NA values with mean of the column
student_performance$feedback[is.na(student_performance$feedback)] <- round(mean(student_performance$feedback, na.rm = TRUE), 0)
student_performance$language[is.na(student_performance$language)] <- round(mean(student_performance$language, na.rm = TRUE), 0)
# Remove out-of-range ages
student_dataset <- subset(student_performance, age < 100)
rm(student_performance)
# Final data check
student_dataset %>%
verify(has_all_names("studentID", "gender", "age", "outcome", "language", "feedback", "Year1", "Year2", "Year3", "Year4")) %>%
assert(not_na, studentID, gender, age, outcome, language, feedback, Year1, Year2, Year3, Year4) %>%
verify(age >= 10) %>%
verify(age <= 100) %>%
assert(in_set("Male", "Female"), gender) %>%
assert(in_set("E1", "E2", "Unemployed", "Education"), outcome) %>%
assert(within_bounds(10000, 99999), studentID) %>%
assert(within_bounds(0, 10), language) %>%
assert(within_bounds(0, 10), feedback) %>%
assert(within_bounds(0, 100), Year1) %>%
assert(within_bounds(0, 100), Year2) %>%
assert(within_bounds(0, 100), Year3) %>%
assert(within_bounds(0, 100), Year4)
cat("All checks passed successfully\n")
# Calculate the difference between Year 4 and Year 1
student_dataset$Year1vs4_difference <- student_dataset$Year4 - student_dataset$Year1
# Calculate the mean difference
mean_difference <- mean(student_dataset$Year1vs4_difference)
# Calculate the confidence interval
confidence_interval <- t.test(student_dataset$Year1vs4_difference)$conf.int
# Print the results
cat("Mean Difference:", round(mean_difference, 2), "\n")
cat("Confidence Interval:", round(confidence_interval[1], 2), "to", round(confidence_interval[2], 2), "\n")
# Calculate the correlation matrix
cor_matrix <- cor(student_dataset[, c("Year1", "Year2", "Year3", "Year4")])
# Create a correlation plot to show correlation values
library(corrplot)
corrplot(cor_matrix, method="number")
# Simple linear regression with Year 4 as the dependent variable
model_simple1 <- lm(Year4 ~ Year1, data = student_dataset)
model_simple2 <- lm(Year4 ~ Year2, data = student_dataset)
model_simple3 <- lm(Year4 ~ Year3, data = student_dataset)
# Compare models by AIC method
extractAIC(model_simple1)
extractAIC(model_simple2)
extractAIC(model_simple3)
# Based on correlation coefficients and AIC, I chose Year 3 as the explanatory variable
summary(model_simple3)
# Print the slope coefficient and R-squared value
slope <- coef(model_simple3)["Year3"]
cat("The slope (gradient) coefficient is:", round(slope, 4), "\n")
r_squared <- summary(model_simple3)$r.squared
cat("The R-squared value is:", round(r_squared, 4), "\n")
# Research question: "Does language proficiency impact academic performance and consequently future outcomes in students?"
# Creating a new variable "Mark" by calculating the average of the four "Year" variables.
student_dataset$Mark <- rowMeans(student_dataset[, c("Year1", "Year2", "Year3", "Year4")])
# Exploring distribution of language proficiency and Mark
hist(student_dataset$language, main = "Histogram of Language Proficiency", xlab = "Language Proficiency", col = "blue")
hist(student_dataset$Mark, main = "Histogram of Student Marks", xlab = "Student Marks", col = "green")
# Visualize the relationship between language proficiency and academic performance by scatter plot
plot(student_dataset$language, student_dataset$Mark, xlab = "Language Proficiency", ylab = "Academic Mark", main = "Relationship Between Language Proficiency and Academic Performance")
# Hypothesis Test
corr_lang_mark <- cor(student_dataset$language, student_dataset$Mark)
cat("Correlation between language and Mark:", corr_lang_mark, "\n")
p_value <- cor.test(student_dataset$language, student_dataset$Mark)$p.value
if (p_value < 0.05) {
cat("The p-value is", p_value, "which is less than 0.05. Therefore, we reject the null hypothesis.")
cat("There is a statistically significant positive correlation between language proficiency and academic performance.")
} else {
cat("The p-value is", p_value, "which is greater than 0.05. Therefore, we fail to reject the null hypothesis.")
cat("There is no statistically significant correlation between language proficiency and academic performance.")
}
# Linear Regression Model
model_simple <- lm(Mark ~ language, data = student_dataset)
summary(model_simple)
# Considering other factor (age) in the model
model_multiple <- lm(Mark ~ language + age, data = student_dataset)
summary(model_multiple)
model_final <- stepAIC(model_multiple)
# Exploring the relationship between the academic performance and outcome after graduation by boxplot
library(ggplot2)
ggplot(student_dataset, aes(x = Mark, y = outcome, fill = outcome)) +
geom_boxplot() +
labs(x = "Mark", y = "Outcome") +
scale_fill_manual(values = c("E1" = "red", "E2" = "blue", "Unemployed" = "green", "Education" = "purple")) +
theme_minimal()
sessionInfo()
# do not change these options
knitr::opts_chunk$set(echo = TRUE) # do not edit this line.
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load any required libraries / additional files here
library(MASS)
library(gapminder)
library(scales)
library(assertr)
library(RSQLite)
library(corrplot)
library(performance)
library(tableone)
library(psych)
library(flextable)
library(readr)
library(dplyr)
library(ggplot2)
library(boot)
# load the dataset here
student_performance <- read.csv("D:/Students-Performance-Analysis/data/contents.csv")
# further data preparation here
# Exploring the data
summary(student_performance)
str(student_performance)
# Count missing values in the "language" and "feedback" columns
missing_values_lang <- sum(is.na(student_performance$language))
missing_values_feed <- sum(is.na(student_performance$feedback))
cat("Number of missing values in 'language' column:", missing_values_lang, "
")
cat("Number of missing values in 'feedback' column:", missing_values_feed, "
")
# Checking non-numeric columns
table(student_performance$gender)
table(student_performance$outcome)
# Check for duplicates in the studentID column
duplicate_count <- sum(duplicated(student_performance$studentID))
cat("Number of duplicates in 'studentID' column:", duplicate_count, "
")
# Replace NA values with mean of the column
student_performance$feedback[is.na(student_performance$feedback)] <- round(mean(student_performance$feedback, na.rm = TRUE), 0)
student_performance$language[is.na(student_performance$language)] <- round(mean(student_performance$language, na.rm = TRUE), 0)
# Remove out-of-range ages
student_dataset <- subset(student_performance, age < 100)
rm(student_performance)
# Final data check
student_dataset %>%
verify(has_all_names("studentID", "gender", "age", "outcome", "language", "feedback", "Year1", "Year2", "Year3", "Year4")) %>%
assert(not_na, studentID, gender, age, outcome, language, feedback, Year1, Year2, Year3, Year4) %>%
verify(age >= 10) %>%
verify(age <= 100) %>%
assert(in_set("Male", "Female"), gender) %>%
assert(in_set("E1", "E2", "Unemployed", "Education"), outcome) %>%
assert(within_bounds(10000, 99999), studentID) %>%
assert(within_bounds(0, 10), language) %>%
assert(within_bounds(0, 10), feedback) %>%
assert(within_bounds(0, 100), Year1) %>%
assert(within_bounds(0, 100), Year2) %>%
assert(within_bounds(0, 100), Year3) %>%
assert(within_bounds(0, 100), Year4)
cat("All checks passed successfully\n")
# Calculate the correlation matrix
cor_matrix <- cor(student_dataset[, c("Year1", "Year2", "Year3", "Year4")])
# Create a correlation plot to show correlation values
library(corrplot)
corrplot(cor_matrix, method="number")
# Simple linear regression with Year 4 as the dependent variable
model_simple1 <- lm(Year4 ~ Year1, data = student_dataset)
model_simple2 <- lm(Year4 ~ Year2, data = student_dataset)
model_simple3 <- lm(Year4 ~ Year3, data = student_dataset)
# Compare models by AIC method
extractAIC(model_simple1)
extractAIC(model_simple2)
extractAIC(model_simple3)
# Based on correlation coefficients and AIC, I chose Year 3 as the explanatory variable
summary(model_simple3)
# Print the slope coefficient and R-squared value
slope <- coef(model_simple3)["Year3"]
cat("The slope (gradient) coefficient is:", round(slope, 4), "\n")
r_squared <- summary(model_simple3)$r.squared
cat("The R-squared value is:", round(r_squared, 4), "\n")
# Research question: "Does language proficiency impact academic performance and consequently future outcomes in students?"
# Creating a new variable "Mark" by calculating the average of the four "Year" variables.
student_dataset$Mark <- rowMeans(student_dataset[, c("Year1", "Year2", "Year3", "Year4")])
# Exploring distribution of language proficiency and Mark
hist(student_dataset$language, main = "Histogram of Language Proficiency", xlab = "Language Proficiency", col = "blue")
hist(student_dataset$Mark, main = "Histogram of Student Marks", xlab = "Student Marks", col = "green")
# Visualize the relationship between language proficiency and academic performance by scatter plot
plot(student_dataset$language, student_dataset$Mark, xlab = "Language Proficiency", ylab = "Academic Mark", main = "Relationship Between Language Proficiency and Academic Performance")
# Hypothesis Test
corr_lang_mark <- cor(student_dataset$language, student_dataset$Mark)
cat("Correlation between language and Mark:", corr_lang_mark, "\n")
p_value <- cor.test(student_dataset$language, student_dataset$Mark)$p.value
if (p_value < 0.05) {
cat("The p-value is", p_value, "which is less than 0.05. Therefore, we reject the null hypothesis.")
cat("There is a statistically significant positive correlation between language proficiency and academic performance.")
} else {
cat("The p-value is", p_value, "which is greater than 0.05. Therefore, we fail to reject the null hypothesis.")
cat("There is no statistically significant correlation between language proficiency and academic performance.")
}
# Linear Regression Model
model_simple <- lm(Mark ~ language, data = student_dataset)
summary(model_simple)
# Considering other factor (age) in the model
model_multiple <- lm(Mark ~ language + age, data = student_dataset)
summary(model_multiple)
model_final <- stepAIC(model_multiple)
# Exploring the relationship between the academic performance and outcome after graduation by boxplot
library(ggplot2)
ggplot(student_dataset, aes(x = Mark, y = outcome, fill = outcome)) +
geom_boxplot() +
labs(x = "Mark", y = "Outcome") +
scale_fill_manual(values = c("E1" = "red", "E2" = "blue", "Unemployed" = "green", "Education" = "purple")) +
theme_minimal()
sessionInfo()
